syntax = "proto2";
package raftpb;

enum EntryType {
  EntryNormal     = 0;
  EntryConfChange = 1;
  EntryConfChangeV2 = 2;
}

message Entry {
  optional  EntryType  Type  = 1;
  optional  uint64     Term  = 2;
  optional  uint64     Index = 3;
  optional  bytes      Data  = 4;
}

message SnapshotMetadata {
  optional ConfState conf_state = 1;
  optional uint64    index      = 2;
  optional uint64    term       = 3;
}

message Snapshot {
  optional bytes            data     = 1;
  optional SnapshotMetadata metadata = 2;
}


enum MessageType {
  MsgHup             = 0;
  MsgBeat            = 1;
  MsgProp            = 2;
  MsgApp             = 3;
  MsgAppResp         = 4;
  MsgVote            = 5;
  MsgVoteResp        = 6;
  MsgSnap            = 7;
  MsgHeartbeat       = 8;
  MsgHeartbeatResp   = 9;
  MsgUnreachable     = 10;
  MsgSnapStatus      = 11;
  MsgCheckQuorum     = 12;
  MsgTransferLeader  = 13;
  MsgTimeoutNow      = 14;
  MsgReadIndex       = 15;
  MsgReadIndexResp   = 16;
  MsgPreVote         = 17;
  MsgPreVoteResp     = 18;
}

message Message {
  optional MessageType type        = 1;
  optional uint64      to          = 2;
  optional uint64      from        = 3;
  optional uint64      term        = 4;
  optional uint64      logTerm     = 5;
  optional uint64      index       = 6;
  repeated Entry       entries     = 7;
  optional uint64      commit      = 8;
  optional Snapshot    snapshot    = 9;
  optional bool        reject      = 10;
  optional uint64      rejectHint  = 11;
  optional bytes       context     = 12; 
}

message HardState {
  optional uint64 term   = 1;
  optional uint64 vote   = 2;
  optional uint64 commit = 3;
}

enum ConfChangeTransition {
    ConfChangeTransitionAuto          = 0;
    ConfChangeTransitionJointImplicit = 1;
    ConfChangeTransitionJointExplicit = 2;
}

message ConfState {
    repeated uint64 nodes = 1;
    repeated uint64 learners          = 2;
    repeated uint64 voters_outgoing   = 3;
    repeated uint64 learners_next     = 4;
    optional bool   auto_leave        = 5;
}

enum ConfChangeType {
  ConfChangeAddNode    = 0;
  ConfChangeRemoveNode = 1;
  ConfChangeUpdateNode = 2;
  ConfChangeAddLearnerNode = 3;
}

message ConfChange {
  optional uint64          id      = 1;
  optional ConfChangeType  type    = 2;
  optional uint64          nodeid  = 3;
  optional bytes           context = 4;
}

message ConfChangeSingle {
    optional ConfChangeType  type    = 1;
    optional uint64          node_id = 2;
}

message ConfChangeV2 {
    optional ConfChangeTransition transition = 1;
    repeated ConfChangeSingle     changes =    2;
    optional bytes                context =    3;
}
